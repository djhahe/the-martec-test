import {
  createAsyncThunk,
  createSlice,
} from '@reduxjs/toolkit';
import { fetchRepos } from '../api/github';

const initialState = {
  repos: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchGithubRepos = createAsyncThunk(
  'github/fetchRepos',
  async (userName) => {
    const response = await fetchRepos(userName);
    // The value we return becomes the `fulfilled` action payload

    return response;
  },
);

export const githubSlice = createSlice({
  name: 'github',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increaseShare: (state, action) => {
      const repoIndex = state.repos.findIndex(
        (repo) => repo.id === action.payload,
      );
      if (repoIndex < 0) {
        return state;
      }
      state.repos[repoIndex] = {
        ...state.repos[repoIndex],
        sharedCount: !state.repos[repoIndex].sharedCount
          ? 1
          : state.repos[repoIndex].sharedCount + 1,
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGithubRepos.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(
        fetchGithubRepos.fulfilled,
        (state, action) => {
          state.status = 'idle';
          state.repos = action.payload;
        },
      );
  },
});

export const { increaseShare } = githubSlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getGithubRepos = (state) => state.github.repos;
export const isLoadingRepos = (state) =>
  state.github.status === 'loading';

export default githubSlice.reducer;
